//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: flogram.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `FlotgServiceClient`, then call methods of this protocol to make API calls.
public protocol FlotgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: FlotgServiceClientInterceptorFactoryProtocol? { get }

  func getChats(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (FlotgMonitor) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, FlotgMonitor>

  func setMonitoring(
    _ request: FlotgMonitor,
    callOptions: CallOptions?
  ) -> UnaryCall<FlotgMonitor, FlotgMonitor>

  func getMessages(
    _ request: FlotgMessagesRequest,
    callOptions: CallOptions?,
    handler: @escaping (FLO_MESSAGE) -> Void
  ) -> ServerStreamingCall<FlotgMessagesRequest, FLO_MESSAGE>
}

extension FlotgServiceClientProtocol {
  public var serviceName: String {
    return "FlotgService"
  }

  /// Server streaming call to GetChats
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChats.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getChats(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (FlotgMonitor) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, FlotgMonitor> {
    return self.makeServerStreamingCall(
      path: FlotgServiceClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to SetMonitoring
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMonitoring.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setMonitoring(
    _ request: FlotgMonitor,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FlotgMonitor, FlotgMonitor> {
    return self.makeUnaryCall(
      path: FlotgServiceClientMetadata.Methods.setMonitoring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMonitoringInterceptors() ?? []
    )
  }

  /// Server streaming call to GetMessages
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessages.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getMessages(
    _ request: FlotgMessagesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (FLO_MESSAGE) -> Void
  ) -> ServerStreamingCall<FlotgMessagesRequest, FLO_MESSAGE> {
    return self.makeServerStreamingCall(
      path: FlotgServiceClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension FlotgServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "FlotgServiceNIOClient")
public final class FlotgServiceClient: FlotgServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: FlotgServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: FlotgServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the FlotgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FlotgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct FlotgServiceNIOClient: FlotgServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FlotgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the FlotgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FlotgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol FlotgServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FlotgServiceClientInterceptorFactoryProtocol? { get }

  func makeGetChatsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, FlotgMonitor>

  func makeSetMonitoringCall(
    _ request: FlotgMonitor,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FlotgMonitor, FlotgMonitor>

  func makeGetMessagesCall(
    _ request: FlotgMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<FlotgMessagesRequest, FLO_MESSAGE>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FlotgServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return FlotgServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: FlotgServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetChatsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, FlotgMonitor> {
    return self.makeAsyncServerStreamingCall(
      path: FlotgServiceClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? []
    )
  }

  public func makeSetMonitoringCall(
    _ request: FlotgMonitor,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FlotgMonitor, FlotgMonitor> {
    return self.makeAsyncUnaryCall(
      path: FlotgServiceClientMetadata.Methods.setMonitoring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMonitoringInterceptors() ?? []
    )
  }

  public func makeGetMessagesCall(
    _ request: FlotgMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<FlotgMessagesRequest, FLO_MESSAGE> {
    return self.makeAsyncServerStreamingCall(
      path: FlotgServiceClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FlotgServiceAsyncClientProtocol {
  public func getChats(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FlotgMonitor> {
    return self.performAsyncServerStreamingCall(
      path: FlotgServiceClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? []
    )
  }

  public func setMonitoring(
    _ request: FlotgMonitor,
    callOptions: CallOptions? = nil
  ) async throws -> FlotgMonitor {
    return try await self.performAsyncUnaryCall(
      path: FlotgServiceClientMetadata.Methods.setMonitoring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMonitoringInterceptors() ?? []
    )
  }

  public func getMessages(
    _ request: FlotgMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FLO_MESSAGE> {
    return self.performAsyncServerStreamingCall(
      path: FlotgServiceClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct FlotgServiceAsyncClient: FlotgServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FlotgServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FlotgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol FlotgServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getChats'.
  func makeGetChatsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, FlotgMonitor>]

  /// - Returns: Interceptors to use when invoking 'setMonitoring'.
  func makeSetMonitoringInterceptors() -> [ClientInterceptor<FlotgMonitor, FlotgMonitor>]

  /// - Returns: Interceptors to use when invoking 'getMessages'.
  func makeGetMessagesInterceptors() -> [ClientInterceptor<FlotgMessagesRequest, FLO_MESSAGE>]
}

public enum FlotgServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FlotgService",
    fullName: "FlotgService",
    methods: [
      FlotgServiceClientMetadata.Methods.getChats,
      FlotgServiceClientMetadata.Methods.setMonitoring,
      FlotgServiceClientMetadata.Methods.getMessages,
    ]
  )

  public enum Methods {
    public static let getChats = GRPCMethodDescriptor(
      name: "GetChats",
      path: "/FlotgService/GetChats",
      type: GRPCCallType.serverStreaming
    )

    public static let setMonitoring = GRPCMethodDescriptor(
      name: "SetMonitoring",
      path: "/FlotgService/SetMonitoring",
      type: GRPCCallType.unary
    )

    public static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/FlotgService/GetMessages",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// Usage: instantiate `FloRssServiceClient`, then call methods of this protocol to make API calls.
public protocol FloRssServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: FloRssServiceClientInterceptorFactoryProtocol? { get }

  func getFeeds(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (FloSyndicationFeed) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, FloSyndicationFeed>

  func createFeed(
    _ request: FloRssCreate,
    callOptions: CallOptions?
  ) -> UnaryCall<FloRssCreate, FloSyndicationFeed>

  func deleteFeed(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions?
  ) -> UnaryCall<FloSyndicationFeed, SwiftProtobuf.Google_Protobuf_Empty>

  func getMessages(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions?,
    handler: @escaping (FLO_MESSAGE) -> Void
  ) -> ServerStreamingCall<FloSyndicationFeed, FLO_MESSAGE>
}

extension FloRssServiceClientProtocol {
  public var serviceName: String {
    return "FloRssService"
  }

  /// Server streaming call to GetFeeds
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFeeds.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getFeeds(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (FloSyndicationFeed) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, FloSyndicationFeed> {
    return self.makeServerStreamingCall(
      path: FloRssServiceClientMetadata.Methods.getFeeds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFeedsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to CreateFeed
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFeed(
    _ request: FloRssCreate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FloRssCreate, FloSyndicationFeed> {
    return self.makeUnaryCall(
      path: FloRssServiceClientMetadata.Methods.createFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? []
    )
  }

  /// Unary call to DeleteFeed
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteFeed(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FloSyndicationFeed, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: FloRssServiceClientMetadata.Methods.deleteFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFeedInterceptors() ?? []
    )
  }

  /// Server streaming call to GetMessages
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessages.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getMessages(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions? = nil,
    handler: @escaping (FLO_MESSAGE) -> Void
  ) -> ServerStreamingCall<FloSyndicationFeed, FLO_MESSAGE> {
    return self.makeServerStreamingCall(
      path: FloRssServiceClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension FloRssServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "FloRssServiceNIOClient")
public final class FloRssServiceClient: FloRssServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: FloRssServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: FloRssServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the FloRssService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FloRssServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct FloRssServiceNIOClient: FloRssServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FloRssServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the FloRssService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FloRssServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol FloRssServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FloRssServiceClientInterceptorFactoryProtocol? { get }

  func makeGetFeedsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, FloSyndicationFeed>

  func makeCreateFeedCall(
    _ request: FloRssCreate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FloRssCreate, FloSyndicationFeed>

  func makeDeleteFeedCall(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FloSyndicationFeed, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetMessagesCall(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<FloSyndicationFeed, FLO_MESSAGE>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FloRssServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return FloRssServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: FloRssServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetFeedsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, FloSyndicationFeed> {
    return self.makeAsyncServerStreamingCall(
      path: FloRssServiceClientMetadata.Methods.getFeeds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFeedsInterceptors() ?? []
    )
  }

  public func makeCreateFeedCall(
    _ request: FloRssCreate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FloRssCreate, FloSyndicationFeed> {
    return self.makeAsyncUnaryCall(
      path: FloRssServiceClientMetadata.Methods.createFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? []
    )
  }

  public func makeDeleteFeedCall(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FloSyndicationFeed, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: FloRssServiceClientMetadata.Methods.deleteFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFeedInterceptors() ?? []
    )
  }

  public func makeGetMessagesCall(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<FloSyndicationFeed, FLO_MESSAGE> {
    return self.makeAsyncServerStreamingCall(
      path: FloRssServiceClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FloRssServiceAsyncClientProtocol {
  public func getFeeds(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FloSyndicationFeed> {
    return self.performAsyncServerStreamingCall(
      path: FloRssServiceClientMetadata.Methods.getFeeds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFeedsInterceptors() ?? []
    )
  }

  public func createFeed(
    _ request: FloRssCreate,
    callOptions: CallOptions? = nil
  ) async throws -> FloSyndicationFeed {
    return try await self.performAsyncUnaryCall(
      path: FloRssServiceClientMetadata.Methods.createFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? []
    )
  }

  public func deleteFeed(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: FloRssServiceClientMetadata.Methods.deleteFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFeedInterceptors() ?? []
    )
  }

  public func getMessages(
    _ request: FloSyndicationFeed,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FLO_MESSAGE> {
    return self.performAsyncServerStreamingCall(
      path: FloRssServiceClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct FloRssServiceAsyncClient: FloRssServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FloRssServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FloRssServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol FloRssServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getFeeds'.
  func makeGetFeedsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, FloSyndicationFeed>]

  /// - Returns: Interceptors to use when invoking 'createFeed'.
  func makeCreateFeedInterceptors() -> [ClientInterceptor<FloRssCreate, FloSyndicationFeed>]

  /// - Returns: Interceptors to use when invoking 'deleteFeed'.
  func makeDeleteFeedInterceptors() -> [ClientInterceptor<FloSyndicationFeed, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getMessages'.
  func makeGetMessagesInterceptors() -> [ClientInterceptor<FloSyndicationFeed, FLO_MESSAGE>]
}

public enum FloRssServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FloRssService",
    fullName: "FloRssService",
    methods: [
      FloRssServiceClientMetadata.Methods.getFeeds,
      FloRssServiceClientMetadata.Methods.createFeed,
      FloRssServiceClientMetadata.Methods.deleteFeed,
      FloRssServiceClientMetadata.Methods.getMessages,
    ]
  )

  public enum Methods {
    public static let getFeeds = GRPCMethodDescriptor(
      name: "GetFeeds",
      path: "/FloRssService/GetFeeds",
      type: GRPCCallType.serverStreaming
    )

    public static let createFeed = GRPCMethodDescriptor(
      name: "CreateFeed",
      path: "/FloRssService/CreateFeed",
      type: GRPCCallType.unary
    )

    public static let deleteFeed = GRPCMethodDescriptor(
      name: "DeleteFeed",
      path: "/FloRssService/DeleteFeed",
      type: GRPCCallType.unary
    )

    public static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/FloRssService/GetMessages",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol FlotgServiceProvider: CallHandlerProvider {
  var interceptors: FlotgServiceServerInterceptorFactoryProtocol? { get }

  func getChats(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<FlotgMonitor>) -> EventLoopFuture<GRPCStatus>

  func setMonitoring(request: FlotgMonitor, context: StatusOnlyCallContext) -> EventLoopFuture<FlotgMonitor>

  func getMessages(request: FlotgMessagesRequest, context: StreamingResponseCallContext<FLO_MESSAGE>) -> EventLoopFuture<GRPCStatus>
}

extension FlotgServiceProvider {
  public var serviceName: Substring {
    return FlotgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetChats":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<FlotgMonitor>(),
        interceptors: self.interceptors?.makeGetChatsInterceptors() ?? [],
        userFunction: self.getChats(request:context:)
      )

    case "SetMonitoring":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FlotgMonitor>(),
        responseSerializer: ProtobufSerializer<FlotgMonitor>(),
        interceptors: self.interceptors?.makeSetMonitoringInterceptors() ?? [],
        userFunction: self.setMonitoring(request:context:)
      )

    case "GetMessages":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FlotgMessagesRequest>(),
        responseSerializer: ProtobufSerializer<FLO_MESSAGE>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        userFunction: self.getMessages(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol FlotgServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FlotgServiceServerInterceptorFactoryProtocol? { get }

  func getChats(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<FlotgMonitor>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func setMonitoring(
    request: FlotgMonitor,
    context: GRPCAsyncServerCallContext
  ) async throws -> FlotgMonitor

  func getMessages(
    request: FlotgMessagesRequest,
    responseStream: GRPCAsyncResponseStreamWriter<FLO_MESSAGE>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FlotgServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return FlotgServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return FlotgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: FlotgServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetChats":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<FlotgMonitor>(),
        interceptors: self.interceptors?.makeGetChatsInterceptors() ?? [],
        wrapping: { try await self.getChats(request: $0, responseStream: $1, context: $2) }
      )

    case "SetMonitoring":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FlotgMonitor>(),
        responseSerializer: ProtobufSerializer<FlotgMonitor>(),
        interceptors: self.interceptors?.makeSetMonitoringInterceptors() ?? [],
        wrapping: { try await self.setMonitoring(request: $0, context: $1) }
      )

    case "GetMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FlotgMessagesRequest>(),
        responseSerializer: ProtobufSerializer<FLO_MESSAGE>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        wrapping: { try await self.getMessages(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol FlotgServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getChats'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChatsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, FlotgMonitor>]

  /// - Returns: Interceptors to use when handling 'setMonitoring'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetMonitoringInterceptors() -> [ServerInterceptor<FlotgMonitor, FlotgMonitor>]

  /// - Returns: Interceptors to use when handling 'getMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMessagesInterceptors() -> [ServerInterceptor<FlotgMessagesRequest, FLO_MESSAGE>]
}

public enum FlotgServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FlotgService",
    fullName: "FlotgService",
    methods: [
      FlotgServiceServerMetadata.Methods.getChats,
      FlotgServiceServerMetadata.Methods.setMonitoring,
      FlotgServiceServerMetadata.Methods.getMessages,
    ]
  )

  public enum Methods {
    public static let getChats = GRPCMethodDescriptor(
      name: "GetChats",
      path: "/FlotgService/GetChats",
      type: GRPCCallType.serverStreaming
    )

    public static let setMonitoring = GRPCMethodDescriptor(
      name: "SetMonitoring",
      path: "/FlotgService/SetMonitoring",
      type: GRPCCallType.unary
    )

    public static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/FlotgService/GetMessages",
      type: GRPCCallType.serverStreaming
    )
  }
}
/// To build a server, implement a class that conforms to this protocol.
public protocol FloRssServiceProvider: CallHandlerProvider {
  var interceptors: FloRssServiceServerInterceptorFactoryProtocol? { get }

  func getFeeds(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<FloSyndicationFeed>) -> EventLoopFuture<GRPCStatus>

  func createFeed(request: FloRssCreate, context: StatusOnlyCallContext) -> EventLoopFuture<FloSyndicationFeed>

  func deleteFeed(request: FloSyndicationFeed, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func getMessages(request: FloSyndicationFeed, context: StreamingResponseCallContext<FLO_MESSAGE>) -> EventLoopFuture<GRPCStatus>
}

extension FloRssServiceProvider {
  public var serviceName: Substring {
    return FloRssServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetFeeds":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<FloSyndicationFeed>(),
        interceptors: self.interceptors?.makeGetFeedsInterceptors() ?? [],
        userFunction: self.getFeeds(request:context:)
      )

    case "CreateFeed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FloRssCreate>(),
        responseSerializer: ProtobufSerializer<FloSyndicationFeed>(),
        interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? [],
        userFunction: self.createFeed(request:context:)
      )

    case "DeleteFeed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FloSyndicationFeed>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteFeedInterceptors() ?? [],
        userFunction: self.deleteFeed(request:context:)
      )

    case "GetMessages":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FloSyndicationFeed>(),
        responseSerializer: ProtobufSerializer<FLO_MESSAGE>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        userFunction: self.getMessages(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol FloRssServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FloRssServiceServerInterceptorFactoryProtocol? { get }

  func getFeeds(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<FloSyndicationFeed>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func createFeed(
    request: FloRssCreate,
    context: GRPCAsyncServerCallContext
  ) async throws -> FloSyndicationFeed

  func deleteFeed(
    request: FloSyndicationFeed,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  func getMessages(
    request: FloSyndicationFeed,
    responseStream: GRPCAsyncResponseStreamWriter<FLO_MESSAGE>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FloRssServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return FloRssServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return FloRssServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: FloRssServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetFeeds":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<FloSyndicationFeed>(),
        interceptors: self.interceptors?.makeGetFeedsInterceptors() ?? [],
        wrapping: { try await self.getFeeds(request: $0, responseStream: $1, context: $2) }
      )

    case "CreateFeed":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FloRssCreate>(),
        responseSerializer: ProtobufSerializer<FloSyndicationFeed>(),
        interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? [],
        wrapping: { try await self.createFeed(request: $0, context: $1) }
      )

    case "DeleteFeed":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FloSyndicationFeed>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteFeedInterceptors() ?? [],
        wrapping: { try await self.deleteFeed(request: $0, context: $1) }
      )

    case "GetMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FloSyndicationFeed>(),
        responseSerializer: ProtobufSerializer<FLO_MESSAGE>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        wrapping: { try await self.getMessages(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol FloRssServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getFeeds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFeedsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, FloSyndicationFeed>]

  /// - Returns: Interceptors to use when handling 'createFeed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFeedInterceptors() -> [ServerInterceptor<FloRssCreate, FloSyndicationFeed>]

  /// - Returns: Interceptors to use when handling 'deleteFeed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteFeedInterceptors() -> [ServerInterceptor<FloSyndicationFeed, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMessagesInterceptors() -> [ServerInterceptor<FloSyndicationFeed, FLO_MESSAGE>]
}

public enum FloRssServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FloRssService",
    fullName: "FloRssService",
    methods: [
      FloRssServiceServerMetadata.Methods.getFeeds,
      FloRssServiceServerMetadata.Methods.createFeed,
      FloRssServiceServerMetadata.Methods.deleteFeed,
      FloRssServiceServerMetadata.Methods.getMessages,
    ]
  )

  public enum Methods {
    public static let getFeeds = GRPCMethodDescriptor(
      name: "GetFeeds",
      path: "/FloRssService/GetFeeds",
      type: GRPCCallType.serverStreaming
    )

    public static let createFeed = GRPCMethodDescriptor(
      name: "CreateFeed",
      path: "/FloRssService/CreateFeed",
      type: GRPCCallType.unary
    )

    public static let deleteFeed = GRPCMethodDescriptor(
      name: "DeleteFeed",
      path: "/FloRssService/DeleteFeed",
      type: GRPCCallType.unary
    )

    public static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/FloRssService/GetMessages",
      type: GRPCCallType.serverStreaming
    )
  }
}
