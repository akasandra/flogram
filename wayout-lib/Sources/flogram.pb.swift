// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: flogram.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum FLAGS: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case invalid // = 0
  case v1 // = 1
  case tg // = 2
  case user // = 4
  case group // = 8
  case channel // = 16
  case UNRECOGNIZED(Int)

  public init() {
    self = .invalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalid
    case 1: self = .v1
    case 2: self = .tg
    case 4: self = .user
    case 8: self = .group
    case 16: self = .channel
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .invalid: return 0
    case .v1: return 1
    case .tg: return 2
    case .user: return 4
    case .group: return 8
    case .channel: return 16
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FLAGS: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [FLAGS] = [
    .invalid,
    .v1,
    .tg,
    .user,
    .group,
    .channel,
  ]
}

#endif  // swift(>=4.2)

public struct FLO_SOURCE {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Int32 = 0

  public var deepFromID: Int64 = 0

  public var sourceUid: String = String()

  public var title: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct FLO_MESSAGE {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Int32 = 0

  public var deepFromID: Int64 = 0

  public var sourceUid: String = String()

  public var title: String = String()

  public var messageUid: String = String()

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var text: String = String()

  public var messageLinks: [String] = []

  public var forwardFromSource: FLO_SOURCE {
    get {return _forwardFromSource ?? FLO_SOURCE()}
    set {_forwardFromSource = newValue}
  }
  /// Returns true if `forwardFromSource` has been explicitly set.
  public var hasForwardFromSource: Bool {return self._forwardFromSource != nil}
  /// Clears the value of `forwardFromSource`. Subsequent reads from it will return its default value.
  public mutating func clearForwardFromSource() {self._forwardFromSource = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _forwardFromSource: FLO_SOURCE? = nil
}

public struct FlotgMonitor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Int32 = 0

  public var source: FLO_SOURCE {
    get {return _source ?? FLO_SOURCE()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {self._source = nil}

  public var monitoringEnabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _source: FLO_SOURCE? = nil
}

public struct FlotgMessagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Int32 = 0

  public var sourceUid: [String] = []

  public var messagesSince: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _messagesSince ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_messagesSince = newValue}
  }
  /// Returns true if `messagesSince` has been explicitly set.
  public var hasMessagesSince: Bool {return self._messagesSince != nil}
  /// Clears the value of `messagesSince`. Subsequent reads from it will return its default value.
  public mutating func clearMessagesSince() {self._messagesSince = nil}

  public var messagesBefore: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _messagesBefore ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_messagesBefore = newValue}
  }
  /// Returns true if `messagesBefore` has been explicitly set.
  public var hasMessagesBefore: Bool {return self._messagesBefore != nil}
  /// Clears the value of `messagesBefore`. Subsequent reads from it will return its default value.
  public mutating func clearMessagesBefore() {self._messagesBefore = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _messagesSince: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _messagesBefore: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct FloSyndicationFeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Int32 = 0

  public var sourceUid: String = String()

  public var title: String = String()

  public var fromPeerID: String = String()

  public var rssUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct FloRssCreate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Int32 = 0

  public var sourceUid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension FLAGS: @unchecked Sendable {}
extension FLO_SOURCE: @unchecked Sendable {}
extension FLO_MESSAGE: @unchecked Sendable {}
extension FlotgMonitor: @unchecked Sendable {}
extension FlotgMessagesRequest: @unchecked Sendable {}
extension FloSyndicationFeed: @unchecked Sendable {}
extension FloRssCreate: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension FLAGS: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Invalid"),
    1: .same(proto: "V1"),
    2: .same(proto: "Tg"),
    4: .same(proto: "User"),
    8: .same(proto: "Group"),
    16: .same(proto: "Channel"),
  ]
}

extension FLO_SOURCE: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "FLO_SOURCE"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "deep_from_id"),
    3: .standard(proto: "source_uid"),
    4: .same(proto: "title"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.flags) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.deepFromID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sourceUid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.flags != 0 {
      try visitor.visitSingularInt32Field(value: self.flags, fieldNumber: 1)
    }
    if self.deepFromID != 0 {
      try visitor.visitSingularInt64Field(value: self.deepFromID, fieldNumber: 2)
    }
    if !self.sourceUid.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceUid, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FLO_SOURCE, rhs: FLO_SOURCE) -> Bool {
    if lhs.flags != rhs.flags {return false}
    if lhs.deepFromID != rhs.deepFromID {return false}
    if lhs.sourceUid != rhs.sourceUid {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FLO_MESSAGE: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "FLO_MESSAGE"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "deep_from_id"),
    3: .standard(proto: "source_uid"),
    4: .same(proto: "title"),
    5: .standard(proto: "message_uid"),
    6: .standard(proto: "created_at"),
    7: .same(proto: "text"),
    8: .standard(proto: "message_links"),
    9: .same(proto: "ForwardFromSource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.flags) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.deepFromID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sourceUid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.messageUid) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.messageLinks) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._forwardFromSource) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.flags != 0 {
      try visitor.visitSingularInt32Field(value: self.flags, fieldNumber: 1)
    }
    if self.deepFromID != 0 {
      try visitor.visitSingularInt64Field(value: self.deepFromID, fieldNumber: 2)
    }
    if !self.sourceUid.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceUid, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.messageUid.isEmpty {
      try visitor.visitSingularStringField(value: self.messageUid, fieldNumber: 5)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 7)
    }
    if !self.messageLinks.isEmpty {
      try visitor.visitRepeatedStringField(value: self.messageLinks, fieldNumber: 8)
    }
    try { if let v = self._forwardFromSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FLO_MESSAGE, rhs: FLO_MESSAGE) -> Bool {
    if lhs.flags != rhs.flags {return false}
    if lhs.deepFromID != rhs.deepFromID {return false}
    if lhs.sourceUid != rhs.sourceUid {return false}
    if lhs.title != rhs.title {return false}
    if lhs.messageUid != rhs.messageUid {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.text != rhs.text {return false}
    if lhs.messageLinks != rhs.messageLinks {return false}
    if lhs._forwardFromSource != rhs._forwardFromSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlotgMonitor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "FlotgMonitor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .same(proto: "source"),
    3: .standard(proto: "monitoring_enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.flags) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._source) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.monitoringEnabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.flags != 0 {
      try visitor.visitSingularInt32Field(value: self.flags, fieldNumber: 1)
    }
    try { if let v = self._source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.monitoringEnabled != false {
      try visitor.visitSingularBoolField(value: self.monitoringEnabled, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FlotgMonitor, rhs: FlotgMonitor) -> Bool {
    if lhs.flags != rhs.flags {return false}
    if lhs._source != rhs._source {return false}
    if lhs.monitoringEnabled != rhs.monitoringEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlotgMessagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "FlotgMessagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "source_uid"),
    3: .standard(proto: "messages_since"),
    4: .standard(proto: "messages_before"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.flags) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.sourceUid) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._messagesSince) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._messagesBefore) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.flags != 0 {
      try visitor.visitSingularInt32Field(value: self.flags, fieldNumber: 1)
    }
    if !self.sourceUid.isEmpty {
      try visitor.visitRepeatedStringField(value: self.sourceUid, fieldNumber: 2)
    }
    try { if let v = self._messagesSince {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._messagesBefore {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FlotgMessagesRequest, rhs: FlotgMessagesRequest) -> Bool {
    if lhs.flags != rhs.flags {return false}
    if lhs.sourceUid != rhs.sourceUid {return false}
    if lhs._messagesSince != rhs._messagesSince {return false}
    if lhs._messagesBefore != rhs._messagesBefore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FloSyndicationFeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "FloSyndicationFeed"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "source_uid"),
    3: .same(proto: "title"),
    4: .standard(proto: "from_peer_id"),
    5: .standard(proto: "rss_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.flags) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sourceUid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.fromPeerID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.rssUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.flags != 0 {
      try visitor.visitSingularInt32Field(value: self.flags, fieldNumber: 1)
    }
    if !self.sourceUid.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceUid, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.fromPeerID.isEmpty {
      try visitor.visitSingularStringField(value: self.fromPeerID, fieldNumber: 4)
    }
    if !self.rssUri.isEmpty {
      try visitor.visitSingularStringField(value: self.rssUri, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FloSyndicationFeed, rhs: FloSyndicationFeed) -> Bool {
    if lhs.flags != rhs.flags {return false}
    if lhs.sourceUid != rhs.sourceUid {return false}
    if lhs.title != rhs.title {return false}
    if lhs.fromPeerID != rhs.fromPeerID {return false}
    if lhs.rssUri != rhs.rssUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FloRssCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "FloRssCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "source_uid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.flags) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sourceUid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.flags != 0 {
      try visitor.visitSingularInt32Field(value: self.flags, fieldNumber: 1)
    }
    if !self.sourceUid.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceUid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FloRssCreate, rhs: FloRssCreate) -> Bool {
    if lhs.flags != rhs.flags {return false}
    if lhs.sourceUid != rhs.sourceUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
